#include "libft.h"
#include <stdio.h>
#include <string.h>

#if defined(FT_STRITER)
static void to_up(char *c) { *c = ft_toupper(*c); }
#endif

#ifdef FT_STRITERI
static void to_up_idx(unsigned int i, char *c)
{
	*c = (i % 2 == 0) ? ft_toupper(*c) : ft_tolower(*c);
}
#endif

#ifdef FT_STRMAP
static char	to_up(char c) { return ft_toupper(c); }
#endif

#ifdef FT_STRMAPI
static char	to_up_idx(unsigned int i, char c) {
	return((i % 2 == 0) ? ft_toupper(c) : ft_tolower(c));
}
#endif

#ifdef FT_STRSPLIT
static void ft_print_arr_str(char **a) {
	while (*a)
	{
		printf("'%s'\n", *a);
		a++;
	}
}
#endif

/**********************
** MAIN STARTS HERE! **
***********************/
int	main(void)
{
#ifdef FT_MEMSET
	printf("* * * ft_memset * * *\n");
	char s1[] = "hello world";
	char s2[] = "hello world";

	printf("Original string: '%s'\n", s1);
	memset(s1, '*', 6);
	printf("std: '%s'\n", s1);
	ft_memset(s2, '*', 6);
	printf("ft_: '%s'\n", s2);

	// NULL checks are not needed. According to the C standard,
	// dereferencing 'NULL' results in 'undefined behaviour'.
	//ft_memset(NULL, '*', 6);
	//memset(NULL, '*', 6);
#endif

#ifdef FT_BZERO
	printf("* * * ft_bzero * * *\n");
	char s1[] = "hello world";
	char s2[] = "hello world";

	printf("Original string: '%s'\n", s2);
	bzero(s2 + 4, 6);
	printf("std: '%s'\n", s2);
	ft_bzero(s1 + 4, 6);
	printf("ft_: '%s'\n", s1);

	// NULL checks are not needed. According to the C standard,
	// dereferencing 'NULL' results in 'undefined behaviour'.
	//bzero(NULL, 6);
	//ft_bzero(NULL, 6);
#endif

#ifdef FT_MEMCPY
	printf("* * * ft_memcpy * * *\n");
	char s1[] = "0123456789";
	char s2[] = "0123456789";
	char *p1;
	char *p2;

	printf("dst: '%s' src: '%s'\n\n", s1, "ABCD");

	p1 = memcpy(s1 + 2, "ABCD", 3);
	printf("std: '%s' ret: '%s' (%p == %p)\n", s1, p1, p1, s1 + 2);

	p2 = memcpy(s2 + 2, "ABCD", 3);
	printf("ft_: '%s' ret: '%s' (%p == %p)\n", s2, p2, p2, s2 + 2);

	p1 = memcpy(s1 + 9, "ABCD", 1);
	printf("std: '%s' ret: '%s' (%p == %p)\n", s1, p1, p1, s1 + 9);

	p2 = memcpy(s2 + 9, "ABCD", 1);
	printf("ft_: '%s' ret: '%s' (%p == %p)\n", s2, p2, p2, s2 + 9);

	// NULL checks are not needed. According to the C standard,
	// dereferencing 'NULL' results in 'undefined behaviour'.
#endif

#ifdef FT_MEMCCPY
	printf("* * * ft_memccpy * * *\n");
	char s1[] = "0123456789";
	char s2[] = "0123456789";
	char *p1;
	char *p2;

	p1 = memccpy(s1, "ABCDE", 'C', 5);
	printf("std: '%s' - ret: '%s'\n", s1, p1);
	p2 = ft_memccpy(s2, "ABCDE", 'C', 5);
	printf("ft_: '%s' - ret: '%s'\n\n", s2, p2);

	p1 = memccpy(s1, "ABCDE", 'A', 5);
	printf("std: '%s' - ret: '%s'\n", s1, p1);
	p2 = ft_memccpy(s2, "ABCDE", 'A', 5);
	printf("ft_: '%s' - ret: '%s'\n\n", s2, p2);

	p1 = memccpy(s1 + 5, "ABCDE", 'o', 5);
	printf("std: '%s' - ret: '%s'\n", s1, p1);
	p2 = ft_memccpy(s2 + 5, "ABCDE", 'o', 5);
	printf("ft_: '%s' - ret: '%s'\n\n", s2, p2);

	// NULL checks are not needed. According to the C standard,
	// dereferencing 'NULL' results in 'undefined behaviour'.
#endif

#ifdef FT_MEMMOVE
	printf("* * * ft_memmove * * *\n");
	char s1[] = "0123456789";
	char s2[] = "0123456789";
	char *p1;
	char *p2;

	// overlapping
	printf("Overlapping strings:\n");
	p1 = memmove(s1 + 2, s1, 5);
	printf("std: %s (%p - %p)\n", s1, p1, s1 + 2);

	p2 = memmove(s2 + 2, s2, 5);
	printf("ft_: %s (%p - %p)\n\n", s2, p2, s2 + 2);

	// Restore string values
	strcpy(s1, "0123456789");
	strcpy(s2, "0123456789");

	// non-overlapping
	p1 = memmove(s1, s1 + 1, 5);
	printf("std: %s (%p - %p)\n", s1, p1, s1);

	p2 = memmove(s2, s2 + 1, 5);
	printf("ft_: %s (%p - %p)\n", s2, p2, s2);

	// F..K NULL checks!!!
#endif

#ifdef FT_MEMCHR
	printf("* * * ft_memchr * * *\n");
	char *s = "hello world!";
	size_t	len = ft_strlen(s);
	char *p1;
	char *p2;

	p1 = memchr(s, 'h', len);
	printf("std: '%c' in '%s'? '%s'\n", 'h', s, p1);
	p2 = ft_memchr(s, 'h', len);
	printf("ft_: '%c' in '%s'? '%s'\n\n", 'h', s, p2);

	p1 = memchr(s, 'o', len);
	printf("std: '%c' in '%s'? '%s'\n", 'o', s, p1);
	p2 = ft_memchr(s, 'o', len);
	printf("ft_: '%c' in '%s'? '%s'\n\n", 'o', s, p2);

	p1 = memchr(s, '!', len);
	printf("std: '%c' in '%s'? '%s'\n", '!', s, p1);
	p2 = ft_memchr(s, '!', len);
	printf("ft_: '%c' in '%s'? '%s'\n\n", '!', s, p2);

	p1 = memchr(s, '\0', len);
	printf("std: '%c' in '%s'? '%s'\n", '\0', s, p1);
	p2 = ft_memchr(s, '\0', len);
	printf("ft_: '%c' in '%s'? '%s'\n\n", '\0', s, p2);

	p1 = memchr(s, 'a', len);
	printf("std: '%c' in '%s'? '%s'\n", 'a', s, p1);
	p2 = ft_memchr(s, 'a', len);
	printf("ft_: '%c' in '%s'? '%s'\n\n", 'a', s, p2);
#endif

#ifdef FT_MEMCMP
	printf("* * * ft_memcmp * * *\n");
	char	greater[4] = "abc\200";
	char	smaller[4] = "abc\0";
	char	empty[1] = "\0";
	int		ret;

	puts("TEST #1: Compare greater to smaller string (positive):");
	ret = memcmp(greater, smaller, 4);
	printf("std: '%s' to '%s': %d\n", greater, smaller, ret);
	ret = ft_memcmp(greater, smaller, 4);
	printf("ft_: '%s' to '%s': %d\n\n", greater, smaller, ret);

	puts("TEST #2: Compare smaller to greater string (negative):");
	ret = memcmp(smaller, greater, 4);
	printf("std: '%s' to '%s': %d\n", smaller, greater, ret);
	ret = ft_memcmp(smaller, greater, 4);
	printf("ft_: '%s' to '%s': %d\n\n", smaller, greater, ret);

	puts("TEST #3: Compare string to empty string (positive):");
	ret = memcmp(greater, empty, 1);
	printf("std: '%s' to '%s': %d\n", greater, empty, ret);
	ret = ft_memcmp(greater, empty, 1);
	printf("ft_: '%s' to '%s': %d\n\n", greater, empty, ret);

	puts("TEST #4: Compare empty string to empty string (zero):");
	ret = memcmp(empty, empty, 1);
	printf("std: '%s' to '%s': %d\n", empty, empty, ret);
	ret = ft_memcmp(empty, empty, 1);
	printf("ft_: '%s' to '%s': %d\n", empty, empty, ret);
#endif

#ifdef FT_STRLEN
	printf("* * * ft_strlen * * *\n");
	char s[] = {'0', '1', '2'};		/* Non null-terminated "string" */

	puts("TEST #1: 'hello' string");
	printf("std: '%s' = %lu\n", "hello", strlen("hello"));
	printf("ft_: '%s' = %lu\n", "hello", ft_strlen("hello"));

	puts("\nTEST #2: Empty string.");
	printf("std: '%s' = %lu\n", "", strlen(""));
	printf("ft_: '%s' = %lu\n", "", ft_strlen(""));
	
	puts("\nTEST #3: Non null-terminated string.");
	//printf("s null-terminated? %d\n", s[3] == '\0'); /* out of boundaries */
	printf("std: '%s' = %lu\n", s, strlen(s));
	printf("ft_: '%s' = %lu\n", s, ft_strlen(s));
#endif

#ifdef FT_STRDUP
	printf("* * * ft_strdup * * *\n");
	char *dup1;
	char *dup2;

	dup1 = strdup("hello");
	printf("std: '%s' (%ld), dup: '%s' (%ld)\n",
	"hello", strlen("hello"), dup1, strlen(dup1));
	dup2 = ft_strdup("hello");
	printf("ft_: '%s' (%ld), dup: '%s' (%ld)\n",
	"hello", strlen("hello"), dup2, strlen(dup2));

	dup1 = strdup("");
	printf("std: '%s' (%ld), dup: '%s' (%ld)\n",
	"", strlen(""), dup1, strlen(dup1));
	dup2 = ft_strdup("");
	printf("ft_: '%s' (%ld), dup: '%s' (%ld)\n",
	"", strlen(""), dup2, strlen(dup2));

	free(dup1);
	free(dup2);
#endif

#ifdef FT_STRCPY
	printf("* * * ft_strcpy * * *\n");
	char s1[] = "hello";
	char s2[] = "hello";
	char *p1;
	char *p2;

	p1 = strcpy(s1, "yo");
	printf("std: '%s' (%ld) ret: '%s'\n", s1, strlen(s1), p1);
	p2 = ft_strcpy(s2, "yo");
	printf("ft_: '%s' (%ld) ret: '%s'\n\n", s2, strlen(s2), p2);

	p1 = strcpy(s1, "12345");
	printf("std: '%s' (%ld) ret: '%s'\n", s1, strlen(s1), p1);
	p2 = ft_strcpy(s2, "12345");
	printf("ft_: '%s' (%ld) ret: '%s'\n\n", s2, strlen(s2), p2);

	// If the destination string of a strcpy() is not large enough,
	// then anything might happen... (from linux man strcpy).
	//p1 = strcpy(s1, "abcdefg");		/* crashes */
	//printf("std: '%s' (%ld) ret: '%s'\n", s1, strlen(s1), p1);
	p2 = ft_strcpy(s2, "abcdefg");
	printf("ft_: '%s' (%ld) ret: '%s'\n", s2, strlen(s2), p2);
#endif

#ifdef FT_STRNCPY
	printf("* * * ft_strncpy * * *\n");
	char s1[6] = "hello\0";
	char s2[6] = "hello\0";

	puts("TEST #1: Length of source (3) is greater than 'n' (1)");
	// Result is, obviously not null-ended. This way of using the fn
	// allows us to paste some chars at the beginning of an existing string.
	printf("std: '%s' ret: '%s'\n", s1, strncpy(s1, "cho", 1));
	printf("ft_: '%s' ret: '%s'\n\n", s2, ft_strncpy(s2, "cho", 1));

	strcpy(s1, "hello");
	strcpy(s2, "hello");

	puts("TEST #1: Length of source (2) is less than 'n' (4)");
	// The resulting string is null-ended; used to smeeesh!
	printf("std: '%s' ret: '%s'\n", s1, strncpy(s1, "yo", 4));
	printf("ft_: '%s' ret: '%s'\n", s2, ft_strncpy(s2, "yo", 4));
#endif

#ifdef FT_STRCAT
	printf("* * * ft_strcat * * *\n");
	char s1[11] = "12345";
	char fill[] = "***********";
	char s2[11] = "12345";
	char *p;
	(void)fill;

	p = strcat(s1, "abcde");
	printf("std: '%s' ret: '%s'\n", s1, p);

	p = ft_strcat(s2, "abcde");
	printf("ft_: '%s' ret: '%s'\n", s2, p);

	strcpy(s1, "12345");
	strcpy(s2, "12345");

	p = ft_strcat(s2, "ABCDEXXX");
	printf("ft_: '%s' ret: '%s'\n", s2, p);

	p = strcat(s1, "ABCDEXXX");
	printf("std: '%s' ret: '%s'\n", s1, p);
#endif

#ifdef FT_STRNCAT
	// Always null-ends the result!
	printf("* * * ft_strncat * * *\n");
	char d1[11] = "01234\0****\0";
	char d2[11] = "01234\0****\0";
	char *p;	// to hold return values

	printf("TEST #1: Original dest.: '%s|%s|'\n", d1, d1 + 6);
	p = strncat(d1, "abcde", 2); // len of src ("abcde") is greater than n.
	printf("std: '%s' ret: '%s'(%ld) null-ended? %d\n\n",
	d1, p, strlen(p), p[strlen(d1)] == '\0');

	printf("TEST #1: Original dest.: '%s|%s|'\n", d2, d2 + 6);
	p = ft_strncat(d2, "abcde", 2); // len of src ("abcde") is greater than n.
	printf("ft_: '%s' ret: '%s'(%ld) null-ended? %d\n\n",
	d2, p, strlen(p), p[strlen(d2)] == '\0');

	// Restore strings to original form (use memcpy, bc of embedded nulls).
	memcpy(d1, "01234\0****\0", 11);
	memcpy(d2, "01234\0****\0", 11);

	printf("TEST #2: Original dest.: '%s|%s|'\n", d1, d1 + 6);
	p = strncat(d1, "x", 3);		/* len of src is smaller than n */
	printf("std: '%s' ret: '%s'(%ld) null-ended? %d\n\n",
	d1, p, strlen(p), p[strlen(d1)] == '\0');

	printf("TEST #2: Original dest.: '%s|%s|'\n", d2, d2 + 6);
	p = ft_strncat(d2, "x", 3);		/* len of src is smaller than n */
	printf("ft_: '%s' ret: '%s'(%ld) null-ended? %d\n\n",
	d2, p, strlen(p), p[strlen(d2)] == '\0');

	// Restore strings to original form (use memcpy, bc of embedded nulls).
	memcpy(d1, "01234\0****\0", 11);
	memcpy(d2, "01234\0****\0", 11);

	printf("TEST #3: Original dest.: '%s|%s|'\n", d1, d1 + 6);
	p = strncat(d1, "o_O", 3);		/* len of src is equal than n */
	printf("std: '%s' ret: '%s'(%ld) null-ended? %d\n\n",
	d1, p, strlen(p), p[strlen(d1)] == '\0');

	printf("TEST #3: Original dest.: '%s|%s|'\n", d2, d2 + 6);
	p = ft_strncat(d2, "o_O", 3);		/* len of src is equal than n */
	printf("ft_: '%s' ret: '%s'(%ld) null-ended? %d\n",
	d2, p, strlen(p), p[strlen(d2)] == '\0');
#endif

#ifdef FT_STRLCAT
	printf("* * * ft_strlcat * * *\n");
	int ret;
	char s1[9] = "01234\0***";
	char s2[9] = "01234\0***";

	// Return value >= dstsize; indicates that the src has been truncated.
	puts("TEST #1: Return value > dstsize (9)");
	ret = strlcat(s1, "ABCDE", 9);
	printf("std: '%s' (ret: %d) null-ended? %d\n", s1, ret, s1[8] == '\0');
	ret = ft_strlcat(s2, "ABCDE", 9);
	printf("ft_: '%s' (ret: %d) null-ended? %d\n\n", s2, ret, s2[8] == '\0');

	// Restore strings to original form.
	memcpy(s1, "01234\0***", 9);
	memcpy(s2, "01234\0***", 9);

	// Return value == dstsize; result shouldn't be null-terminated.
	puts("TEST #2: Return value == dstsize (9)");
	ret = strlcat(s1, "ABCD", 9);
	printf("std: '%s' (ret: %d) null-ended? %d\n", s1, ret, s1[8] == '\0');
	ret = ft_strlcat(s2, "ABCD", 9);
	printf("ft_: '%s' (ret: %d) null-ended? %d\n\n", s2, ret, s2[8] == '\0');

	memcpy(s1, "01234\0***", 9);
	memcpy(s2, "01234\0***", 9);

	// Wrong dstsize (Original throws a warning; ft_strlcat doesn't null-end!
	puts("TEST #3: Wrong dstsize");
	//ret = strlcat(s1, "ABCDE", 10);
	//printf("std: '%s' (ret: %d) null-ended? %d\n", s1, ret, s1[8] == '\0');
	ret = ft_strlcat(s2, "ABCDE", 10);
	printf("ft_: '%s' (ret: %d) null-ended? %d\n\n", s2, ret, s2[8] == '\0');

	memcpy(s1, "01234\0***", 9);
	memcpy(s2, "01234\0***", 9);

	// Return value < dstsize; indicates that the src has fully concatenated.
	puts("TEST #4: Return value < dstsize (9)");
	ret = strlcat(s1, "ABC", 9);
	printf("std: '%s' (ret: %d) null-ended? %d\n", s1, ret, s1[8] == '\0');
	ret = ft_strlcat(s2, "ABC", 9);
	printf("ft_: '%s' (ret: %d) null-ended? %d\n\n", s2, ret, s2[8] == '\0');

	memcpy(s1, "01234\0***", 9);
	memcpy(s2, "01234\0***", 9);

	// Return value < dstsize; indicates that the src has fully concatenated.
	puts("TEST #5: Return value < dstsize (9)");
	ret = strlcat(s1, "A", 9);
	printf("std: '%s' (ret: %d) null-ended? %d\n", s1, ret, s1[6] == '\0');
	printf("Peek after end: %c|%c|%c|%c|\n", s1[5], s1[6], s1[7], s1[8]);
	ret = ft_strlcat(s2, "A", 9);
	printf("ft_: '%s' (ret: %d) null-ended? %d\n", s2, ret, s2[6] == '\0');
	printf("Peek after end: %c|%c|%c|%c|\n", s2[5], s2[6], s2[7], s2[8]);
#endif

#ifdef FT_STRCHR
	char s1[] = "hello world";	// len == 11 chars + null (null at index 11).

	printf("std: (%c) '%s'\n", 'h', strchr(s1, 'h'));
	printf("std: (%c) '%s'\n", 'o', strchr(s1, 'o'));
	printf("std: (%c) '%s'\n", 'x', strchr(s1, 'x'));
	printf("std: (%d) %p == %p\n\n", 0, s1 + 11, strchr(s1, 0));

	printf("ft_: (%c) '%s'\n", 'h', ft_strchr(s1, 'h'));
	printf("ft_: (%c) '%s'\n", 'o', ft_strchr(s1, 'o'));
	printf("ft_: (%c) '%s'\n", 'x', ft_strchr(s1, 'x'));
	printf("ft_: (%d) %p == %p\n", 0, s1 + 11, strchr(s1, 0));
#endif

#ifdef FT_STRRCHR
	char s1[] = "hello world";	// len == 11 chars + null (null at index 11).

	printf("std: (%c) '%s'\n", 'h', strchr(s1, 'h'));
	printf("std: (%c) '%s'\n", 'o', strchr(s1, 'o'));
	printf("std: (%c) '%s'\n", 'x', strchr(s1, 'x'));
	printf("std: (%c) '%s'\n", 'd', strchr(s1, 'd'));
	printf("std: (%d) %p == %p\n\n", 0, s1 + 11, strchr(s1, 0));

	printf("ft_: (%c) '%s'\n", 'h', ft_strchr(s1, 'h'));
	printf("ft_: (%c) '%s'\n", 'o', ft_strchr(s1, 'o'));
	printf("ft_: (%c) '%s'\n", 'x', ft_strchr(s1, 'x'));
	printf("ft_: (%c) '%s'\n", 'd', ft_strchr(s1, 'd'));
	printf("ft_: (%d) %p == %p\n", 0, s1 + 11, strchr(s1, 0));
#endif

#ifdef FT_STRSTR
	printf("* * * ft_strstr * * *\n");
	char *ptr;

	ptr = strstr("Foo Bar Baz", "Bar");
	printf("std: '%s'\n", ptr);
	ptr = ft_strstr("Foo Bar Baz", "Bar");
	printf("ft_: '%s'\n\n", ptr);

	ptr = strstr("Baz", "Foo Bar Baz");
	printf("std: '%s'\n", ptr);
	ptr = ft_strstr("Baz", "Foo Bar Baz");
	printf("ft_: '%s'\n\n", ptr);

	ptr = strstr("Foo Bar Baz", "");
	printf("std: '%s'\n", ptr);
	ptr = ft_strstr("Foo Bar Baz", "");
	printf("ft_: '%s'\n\n", ptr);

	ptr = strstr("aaab.", "aab");
	printf("std: '%s'\n", ptr);
	ptr = ft_strstr("aaab.", "aab");
	printf("ft_: '%s'\n\n", ptr);

	ptr = strstr("", "Foo");
	printf("std: '%s'\n", ptr);
	ptr = ft_strstr("", "Foo");
	printf("ft_: '%s'\n", ptr);
#endif

#ifdef FT_STRNSTR
	printf("* * * ft_strnstr * * *\n");
	char *ptr;

	ptr = strnstr("Foo Bar Baz", "Bar", 7);
	printf("std: '%s'\n", ptr);
	ptr = ft_strnstr("Foo Bar Baz", "Bar", 7);
	printf("ft_: '%s'\n\n", ptr);

	ptr = strnstr("Baz", "Baz", 3);
	printf("std: '%s'\n", ptr);
	ptr = ft_strnstr("Baz", "Baz", 3);
	printf("ft_: '%s'\n\n", ptr);

	ptr = strnstr("Foo Bar Baz", "", 3);
	printf("std: '%s'\n", ptr);
	ptr = ft_strnstr("Foo Bar Baz", "", 3);
	printf("ft_: '%s'\n\n", ptr);

	ptr = strnstr("aaab.", "aab", 4);
	printf("std: '%s'\n", ptr);
	ptr = ft_strnstr("aaab.", "aab", 4);
	printf("ft_: '%s'\n\n", ptr);

	ptr = strnstr("", "Foo", 3);
	printf("std: '%s'\n", ptr);
	ptr = ft_strnstr("", "Foo", 3);
	printf("ft_: '%s'\n", ptr);
#endif

#ifdef FT_STRCMP
	printf("* * * ft_strcmp * * *\n");
	char	greater[4] = "abc\200";
	char	smaller[4] = "abc\0";
	char	empty[1] = "\0";
	int		ret;

	puts("TEST #1: Compare greater to smaller string:");
	ret = strcmp(greater, smaller);
	printf("std: '%s' to '%s': %d\n", greater, smaller, ret);
	ret = ft_strcmp(greater, smaller);
	printf("ft_: '%s' to '%s': %d\n\n", greater, smaller, ret);

	puts("TEST #2: Compare smaller to greater string:");
	ret = strcmp(smaller, greater);
	printf("std: '%s' to '%s': %d\n", smaller, greater, ret);
	ret = ft_strcmp(smaller, greater);
	printf("ft_: '%s' to '%s': %d\n\n", smaller, greater, ret);

	puts("TEST #3: Compare string to empty string:");
	ret = strcmp(greater, empty);
	printf("std: '%s' to '%s': %d\n", greater, empty, ret);
	ret = ft_strcmp(greater, empty);
	printf("ft_: '%s' to '%s': %d\n\n", greater, empty, ret);

	puts("TEST #4: Compare empty string to empty string:");
	ret = strcmp(empty, empty);
	printf("std: '%s' to '%s': %d\n", empty, empty, ret);
	ret = ft_strcmp(empty, empty);
	printf("ft_: '%s' to '%s': %d\n\n", empty, empty, ret);
#endif

#ifdef STRNCMP
	char *a = "abc\0";
	char *b = "abc\200";
	printf("* * * ft_strncmp * * *\n");
	printf("strncmp %s to %s: %d\n", a, b, ft_strncmp(a, b, 4));
	printf("strncmp %s to %s: %d\n", b, a, ft_strncmp(b, a, 4));
#endif

#ifdef ISALPHA
	printf("* * * ft_isalpha * * *\n");
	printf("isalpha('C')? %s\n", ft_isalpha('C') ? "true" : "false");
	printf("isalpha('2')? %s\n", ft_isalpha('2') ? "true" : "false");
	printf("isalpha('*')? %s\n", ft_isalpha('*') ? "true" : "false");
	printf("isalpha(' ')? %s\n", ft_isalpha(' ') ? "true" : "false");
#endif

#ifdef ATOI
	printf("* * * ft_atoi * * *\n");
	printf("atoi(\"10\"): %d\n", ft_atoi("10"));
	printf("atoi(\"0\"): %d\n", ft_atoi("0"));
	printf("atoi(\"-2147483648\"): %d\n", ft_atoi("-2147483648"));
	printf("atoi(\"2147483648\"): %d\n", ft_atoi("2147483648"));
	printf("atoi(\"2147483647\"): %d\n", ft_atoi("2147483647"));
#endif

#ifdef ISDIGIT
	printf("* * * ft_isdigit * * *\n");
	printf("isdigit('3')? %s\n", ft_isdigit('3') ? "true" : "false");
	printf("isdigit('a')? %s\n", ft_isdigit('a') ? "true" : "false");
	printf("isdigit('*')? %s\n", ft_isdigit('*') ? "true" : "false");
	printf("isdigit(' ')? %s\n", ft_isdigit(' ') ? "true" : "false");
#endif

#ifdef ISALNUM
	printf("* * * ft_isalnum * * *\n");
	printf("isalnum('3')? %s\n", ft_isalnum('3') ? "true" : "false");
	printf("isalnum('a')? %s\n", ft_isalnum('a') ? "true" : "false");
	printf("isalnum('*')? %s\n", ft_isalnum('*') ? "true" : "false");
	printf("isalnum(' ')? %s\n", ft_isalnum(' ') ? "true" : "false");
#endif

#ifdef ISASCII
	int ch;
	printf("* * * ft_isascii * * *\n");
	for (ch = -3; ch <= 127; ch++)
		printf("isascii('%c')? %s\n", ch, ft_isascii(ch) ? "true" : "false");
#endif

#ifdef ISPRINT
	int ch;
	printf("* * * ft_isprint * * *\n");
	for (ch = 0; ch <= 127; ch++)
		printf("isprint('%c')? %s\n", ch, ft_isprint(ch) ? "true" : "false");
#endif

#ifdef TOUPPER
	int ch;
	printf("* * * ft_toupper * * *\n");
	for (ch = '`'; ch <= 'z'; ch++)
		printf("toupper('%c'): %c\n", ch, ft_toupper(ch));
#endif

#ifdef TOLOWER
	int ch;
	printf("* * * ft_tolower * * *\n");
	for (ch = '@'; ch <= 'Z'; ch++)
		printf("tolower('%c'): %c\n", ch, ft_tolower(ch));
#endif

#ifdef FT_MEMALLOCDEL
	printf("* * * ft_memalloc * * *\n");
	void *area = NULL;
	void *dangling;

	printf("Area points to %p\n", area);
	area = ft_memalloc(3);
	printf("Area points to %p\n", area);
	ft_memdel(&area);
	printf("Area points to %p\n", area);
	ft_memdel(&dangling);
	printf("Dangling points to %p\n", area);
#endif

#ifdef FT_STRNEWDEL
	printf("* * * ft_strnew * * *\n");
	char *s;
	char *dangling;

	s = ft_strnew(6);
	printf("'%s'\n", s);
	ft_strcpy(s, "hello");
	printf("'%s'\n", s);
	ft_strclr(s);
	printf("'%s'\n", s);
	ft_strdel(&s);
	printf("'%p'\n", s);
	ft_strdel(&dangling);
	ft_strclr(dangling);
#endif

#ifdef FT_STRITER
	printf("* * * ft_striter * * *\n");
	char s[] = "abcdef";

	ft_striter(s, to_up);
	printf("%s\n", s);
#endif

#ifdef FT_STRITERI
	printf("* * * ft_striteri * * *\n");
	char s[] = "abcdef";

	ft_striteri(s, to_up_idx);
	printf("%s\n", s);
#endif

#ifdef FT_STRMAP
	printf("* * * ft_strmap * * *\n");
	char *s;

	s = ft_strmap("hello, world", to_up);
	printf("'%s'\n", s);
	ft_strdel(&s);
#endif

#ifdef FT_STRMAPI
	printf("* * * ft_strmapi * * *\n");
	char *s;

	s = ft_strmapi("hello, world", to_up_idx);
	printf("'%s'\n", s);
	ft_strdel(&s);
#endif

#ifdef FT_STREQU
	printf("* * * ft_strequ * * *\n");
	char *s1 = "123";
	char n1[3];	/* null string */
	char n2[3];
	char empty[1] = "\0";

	printf("'%s' == '%s'? '%s'\n", s1, "123", ft_strequ(s1, "123")? "y" : "n");
	printf("'%s' == '%s'? '%s'\n", s1, "129", ft_strequ(s1, "129")? "y" : "n");
	printf("'%s' == '%s'? '%s'\n", s1, "", ft_strequ(s1, "")? "y" : "n");
	printf("'%s' == '%s'? '%s'\n", "", "", ft_strequ("", "")? "y" : "n");
	printf("'%s' == '%s'? '%s'\n", n1, n2, ft_strequ(n1, n2)? "y" : "n");
	printf("'%s' == '%s'? '%s'\n", n1, empty, ft_strequ(n1, empty)? "y" : "n");
#endif

#ifdef FT_STRNEQU
	printf("* * * ft_strnequ * * *\n");
	char *s1 = "123";

	printf("'%s' == '%s'? '%d'\n", s1, "123", ft_strnequ(s1, "123", 4));
	printf("'%s' == '%s'? '%d'\n", s1, "129", ft_strnequ(s1, "129", 3));
	printf("'%s' == '%s'? '%d'\n", s1, "", ft_strnequ(s1, "", 3));
#endif

#ifdef FT_STRSUB
	printf("* * * ft_strjoin * * *\n");
	char *s1 = "123";
	char *sub;

	sub = ft_strsub(s1, 1, 1);
	printf("'%s' (len: %ld)\n", sub, ft_strlen(sub));
	sub = ft_strsub(s1, 0, 3);
	printf("'%s' (len: %ld)\n", sub, ft_strlen(sub));
	sub = ft_strsub(s1, 0, 2);
	printf("'%s' (len: %ld)\n", sub, ft_strlen(sub));
#endif

#ifdef FT_STRJOIN
	printf("* * * ft_strsub * * *\n");
	char *join;

	join = ft_strjoin("hello", " world");
	printf("'%s' (len: %ld)\n", join, ft_strlen(join));
	ft_strdel(&join);
#endif

#ifdef FT_STRTRIM
	printf("* * * ft_strtrim * * *\n");
	char *s;

	s = ft_strtrim("\t\nhello world \n\t");
	printf("'%s'\n", s);
	ft_strdel(&s);
#endif

#ifdef FT_STRSPLIT
	printf("* * * ft_strsplit * * *\n");
	
	ft_print_arr_str(ft_strsplit("**hello*world", '*'));
	ft_putchar('\n');
	ft_print_arr_str(ft_strsplit("*hello*fellow***students*", '*'));
	ft_putchar('\n');
	ft_print_arr_str(ft_strsplit("**fak da police*", '*'));
	ft_putchar('\n');
	ft_print_arr_str(ft_strsplit("hello world*", '*'));
	ft_putchar('\n');
	ft_print_arr_str(ft_strsplit("*last one", '*'));
	ft_putchar('\n');
	ft_print_arr_str(ft_strsplit("no, for real...", '*'));
#endif

#ifdef FT_ITOA
	printf("* * * ft_itoa * * *\n");
	char *s;

	s = ft_itoa(0);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(201);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(-201);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(234);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(-234);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(-2147483648);
	printf("%s\n", s);
	ft_strdel(&s);

	s = ft_itoa(2147483647);
	printf("%s\n", s);
	ft_strdel(&s);

#endif

#ifdef FT_PUTCHAR
	printf("* * * ft_putchar * * *\n");
	for (int ch = 0; ch <= 256; ch++)
		ft_putchar(ch);
	ft_putchar('\n');
#endif

#ifdef FT_PUTSTR
	printf("* * * ft_putstr * * *\n");
	char *s1;
	char *s2 = NULL;

	ft_putstr("'hello world'\n");
	ft_putstr("''\n");
	ft_putstr(s1);
	ft_putstr(s2);
#endif

#ifdef FT_PUTENDL
	printf("* * * ft_putendl * * *\n");
	char *s1 = NULL;
	char *s2; /* wild pointer: undefined behaviour */

	ft_putendl("'hello world'");
	ft_putendl(s1);
	ft_putendl(s2);
#endif

#ifdef FT_PUTNBR
	printf("* * * ft_putnbr * * *\n");

	ft_putnbr(234);
	ft_putchar('\n');
	ft_putnbr(-2147483648);
	ft_putchar('\n');
	ft_putnbr(2147483647);
	ft_putchar('\n');
	ft_putnbr(10001);
	ft_putchar('\n');
	ft_putnbr(0);
	ft_putchar('\n');
#endif

#ifdef FT_PUTCHAR_FD
	printf("* * * ft_putchar_fd * * *\n");

	for (int ch = 0; ch <= 256; ch++)
		ft_putchar_fd(ch, 2);
	ft_putchar_fd('\n', 2);
#endif

#ifdef FT_PUTSTR_FD
	printf("* * * ft_putstr_fd * * *\n");
	char *s1 = NULL;
	char *s2; /* wild pointer: undefined behaviour */

	ft_putstr_fd("hello world in stderr\n", 2);
	ft_putstr_fd(s1, 2);
	ft_putstr_fd("*\n", 2);
	ft_putstr_fd(s2, 2);
#endif

#ifdef FT_PUTENDL_FD
	printf("* * * ft_putendl_fd * * *\n");
	char *s1 = NULL;
	char *s2; /* wild pointer: undefined behaviour */

	ft_putendl("'hello world'");
	ft_putendl(s1);
	ft_putendl("*");
	ft_putendl(s2);
#endif

#ifdef FT_PUTNBR_FD
	printf("* * * ft_putnbr_fd * * *\n");
	ft_putnbr_fd(234, 1);
#endif

	return (0);
}

/*
** To compile:
** gcc -Wall -Werror -Wextra main.c -L. -lft
** No need to set the location of the header because it's at the root of the
** directory and not nested in some subfolder (./includes/ft_libft.h):
**
** To set the location of the Static Library (./libft.a):
**		-L.
**
** To set the Name of the static library (libft.a, but
** we gotta leave the 'lib' and the '.a' extension out.):
**		-lft
*/
